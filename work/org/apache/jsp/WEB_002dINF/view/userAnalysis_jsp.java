/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.0.38
 * Generated at: 2017-11-21 07:22:05 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.WEB_002dINF.view;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class userAnalysis_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  static {
    _jspx_dependants = new java.util.HashMap<java.lang.String,java.lang.Long>(2);
    _jspx_dependants.put("jar:file:/E:/maven/repository/jstl/jstl/1.2/jstl-1.2.jar!/META-INF/c.tld", Long.valueOf(1153356282000L));
    _jspx_dependants.put("file:/E:/maven/repository/jstl/jstl/1.2/jstl-1.2.jar", Long.valueOf(1511237059390L));
  }

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
        throws java.io.IOException, javax.servlet.ServletException {

final java.lang.String _jspx_method = request.getMethod();
if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET POST or HEAD");
return;
}

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\t\r\n");
      out.write("\t\r\n");
      out.write("<div id=\"ChartPanel\">\r\n");
      out.write("\t<div class=\"genderAnalysis\"><canvas id=\"piechart\" width=\"200\" height=\"200\" ></canvas></div>\r\n");
      out.write("\t<div class=\"createDateAnalysis\"><canvas id=\"linechart\" ></canvas></div>\r\n");
      out.write("</div>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<script type=\"text/javascript\">\r\n");
      out.write("\r\n");
      out.write("\t\r\n");
      out.write("\t//饼状图参数\r\n");
      out.write("\tvar pieChartData = {\r\n");
      out.write("\t\tlabels : \"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${pieChartData.labels}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("\".split(\",\"),\r\n");
      out.write("\t\tdatasets : [ {\r\n");
      out.write("\t\t\tbackgroundColor : [ 'rgba(54, 162, 235, 1)','rgba(255,99,132,1)' ],\r\n");
      out.write("\t\t\tdata : \"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${pieChartData.datas}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("\".split(\",\")\r\n");
      out.write("\t\t} ]\r\n");
      out.write("\t};\r\n");
      out.write("\t\r\n");
      out.write("\t//线性图参数\r\n");
      out.write("\tvar lineChartData = {\r\n");
      out.write("\t\t\tlabels :\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${lineChartData.labels}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("\".split(\",\"),\r\n");
      out.write("\t\t\tdatasets : [{\r\n");
      out.write("\t\t\t\tlabel: \"创建用户数量\",\r\n");
      out.write("\t\t\t\tborderColor : \"rgba(54, 162, 235, 1)\",\r\n");
      out.write("\t\t\t\tdata : \"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${lineChartData.datas}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("\".split(\",\"),\r\n");
      out.write("\t\t\t\tfill : false //线下面填充\r\n");
      out.write("\t\t\t}]\r\n");
      out.write("\t};\r\n");
      out.write("\t\r\n");
      out.write("\t$(function() {\r\n");
      out.write("\t\tvar piectx = $(\"#piechart\").get(0).getContext(\"2d\");\r\n");
      out.write("\t\tvar linectx = $(\"#linechart\").get(0).getContext(\"2d\");\r\n");
      out.write("\t\t//生成饼状图\r\n");
      out.write("\t\tvar piechart = new Chart(piectx, {\r\n");
      out.write("\t\t\ttype : 'pie',\r\n");
      out.write("\t\t\tdata : pieChartData,\r\n");
      out.write("\t\t\toptions : {\r\n");
      out.write("\t\t\t\ttitle : {\r\n");
      out.write("\t\t\t\t\tdisplay: true,\r\n");
      out.write("\t\t\t\t\ttext: '用户性别分布统计',\r\n");
      out.write("\t\t\t\t\tfontColor: '#000'\r\n");
      out.write("\t\t\t\t}\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t});\r\n");
      out.write("\t\t\r\n");
      out.write("\t\t//生成线性图\r\n");
      out.write("\t\tvar linechart=new Chart(linectx,{\r\n");
      out.write("\t\t\ttype: 'line',\r\n");
      out.write("\t\t\tdata: lineChartData,\r\n");
      out.write("\t\t\t options: {\r\n");
      out.write("\t                responsive: true,\r\n");
      out.write("\t                title : {//设置标题\r\n");
      out.write("\t\t\t\t\t\tdisplay: true,\r\n");
      out.write("\t\t\t\t\t\ttext: '用户创建日期统计',\r\n");
      out.write("\t\t\t\t\t\tfontColor: '#000'\r\n");
      out.write("\t\t\t\t\t},\r\n");
      out.write("\t                tooltips: {\r\n");
      out.write("\t                    mode: 'index',\r\n");
      out.write("\t                    intersect: false,\r\n");
      out.write("\t                },\r\n");
      out.write("\t                hover: {\r\n");
      out.write("\t                    mode: 'nearest',\r\n");
      out.write("\t                    intersect: true\r\n");
      out.write("\t                },\r\n");
      out.write("\t                scales: {//设置横轴坐标\r\n");
      out.write("\t                    xAxes: [{\r\n");
      out.write("\t                        display: true,\r\n");
      out.write("\t                        scaleLabel: {\r\n");
      out.write("\t                            display: true,\r\n");
      out.write("\t                            labelString: '创建日期'\r\n");
      out.write("\t                        }\r\n");
      out.write("\t                    }],\r\n");
      out.write("\t                    yAxes: [{//设置纵轴坐标\r\n");
      out.write("\t                        display: true,\r\n");
      out.write("\t                        scaleLabel: {\r\n");
      out.write("\t                            display: true,\r\n");
      out.write("\t                            labelString: '创建用户数量'\r\n");
      out.write("\t                        }\r\n");
      out.write("\t                    }]\r\n");
      out.write("\t                }\r\n");
      out.write("\t            }\r\n");
      out.write("\t\t});\r\n");
      out.write("\t});\r\n");
      out.write("</script>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
